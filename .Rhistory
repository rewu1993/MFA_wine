plot_compromise(dimension1, dimension2)
mfa_wine@cfs
#load necessary packages
library(mfaR)
library(MFAg)
# Read data set
wines <- read.csv("wines.csv")
# Add row names
row.names(wines) <- wines[,1]
# Separate the grand table into individual tables (create the set list)
col_ind = grep("V2", colnames(wines))
sets = list()
for (i in 1:(length(col_ind))){
# First 9 tables
if (i < 10){
sets[[i]]= (col_ind[i]-1):(col_ind[i+1]-2)
}
# Last table
else{
sets[[i]]= (col_ind[i]-1):(col_ind[i]+2)
}
}
# Construct an object of class 'mfa'
mfa_wine <- mfa_const(data = wines, sets  = sets, ncomps = 4)
mfa_wine
print(mfa_wine)
cfs = mfa_wine@cfs
row.names(cfs) <- row.names(wines)
plot_compromise(cfs)
cfs
plot_compromise(cfs[, 1], cfs[, 2], ronames_vec = row.names(wines))
plot_compromise(cfs[, 1], cfs[, 2], rownames_vec = row.names(wines))
library(gridExtra)
plot = list()
for (i in 1:10){
pfs = test@pfs[[i]]
plot_pfs(pfs[, 1], pfs[, 2], rownames(wines))
}
print (do.call(grid.arrange,  plot))
pfs = test@pfs[[1]]
pfs
rownames(wines)
dimension1 <- pfs[,1]
dimension1
dimension2 <- pfs[,2]
dimension2
rownames_vec <- rownames(wines)
rownames_vec
plot_pfs(pfs[, 1], pfs[, 2], rownames(wines))
plot = list()
for (i in 1:10){
pfs = test@pfs[[i]]
plot[[i]] = plot_pfs(pfs[, 1], pfs[, 2], rownames(wines))
}
print (do.call(grid.arrange,  plot))
plot = list()
for (i in 1:10){
Q = test@mol[[i]]
row.names(Q) <- colnames(wines)[sets[[i]]]
colnames(Q) <- c("x","y")
plot[[i]] = plot_vload(Q$x, Q$y, rownames(Q))
}
print (do.call(grid.arrange,  plot))
plot = list()
for (i in 1:10){
Q = mfa_wine@mol[[i]]
row.names(Q) <- colnames(wines)[sets[[i]]]
colnames(Q) <- c("x","y")
plot[[i]] = plot_vload(Q$x, Q$y, rownames(Q))
}
print (do.call(grid.arrange,  plot))
plot = list()
for (i in 1:10){
plot[[i]] = plot_vload(mfa_wine@mol[[i]][,1], mfa_wine@mol[[i]][,2], colnames(wines)[sets[[i]]])
}
print (do.call(grid.arrange,  plot))
col_ind = grep("V15", colnames(wines))
colnames(wines)[col_ind] <- "Peach"
col_ind = grep("V14", colnames(wines))
colnames(wines)[col_ind] <- "Grass"
col_ind = grep("V13", colnames(wines))
colnames(wines)[col_ind] <- "Melon"
col_ind = grep("V12", colnames(wines))
colnames(wines)[col_ind] <- "Hay"
col_ind = grep("V11", colnames(wines))
colnames(wines)[col_ind] <- "Vegetal"
col_ind = grep("V10", colnames(wines))
colnames(wines)[col_ind] <- "Flinty"
col_ind = grep("V9", colnames(wines))
colnames(wines)[col_ind] <- "Grassy"
col_ind = grep("V8", colnames(wines))
colnames(wines)[col_ind] <- "Leafy"
col_ind = grep("V7", colnames(wines))
colnames(wines)[col_ind] <- "Tropical"
col_ind = grep("V6", colnames(wines))
colnames(wines)[col_ind] <- "Citrus"
col_ind = grep("V5", colnames(wines))
colnames(wines)[col_ind] <- "Smoky"
col_ind = grep("V4", colnames(wines))
colnames(wines)[col_ind] <- "Mineral"
col_ind = grep("V3", colnames(wines))
colnames(wines)[col_ind] <- "Green Pepper"
col_ind = grep("V2", colnames(wines))
colnames(wines)[col_ind] <- "Passion Fruit"
col_ind = grep("V1", colnames(wines))
colnames(wines)[col_ind] <- "Cat Pee"
plot = list()
for (i in 1:10){
plot[[i]] = plot_vload(mfa_wine@mol[[i]][,1], mfa_wine@mol[[i]][,2], colnames(wines)[sets[[i]]])
}
print (do.call(grid.arrange,  plot))
library(devtools)
devtools::document()
# checking documentation
devtools::check_man()
# running tests
devtools::test()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build()
plot_compromise <- function(dimension1,
dimension2,
rownames_vec = 1:length(dimension1),
img1 = "V1",
img2 = "V2",
img3 = "V3"){
dat <- data.frame(x = dimension1, y = dimension2, label = rownames_vec)
colnames(dat) <- c("x","y")
ggplot(dat)+ geom_point(aes(x,y)) +labs(title="Compromise of the tables",
x ="1", y = "2")+  ylim(-1, 1) + geom_text(data = dat, aes(x,y, label = rownames_vec), vjust = -2)+
mapply(function(xx, yy)
annotation_raster(img1, xmin=xx-0.08, xmax=xx+0.08, ymin=yy-0.04, ymax=yy+0.04),
dat$x[1:4], dat$y[1:4]) +
mapply(function(xx, yy)
annotation_raster(img2, xmin=xx-0.08, xmax=xx+0.08, ymin=yy-0.04, ymax=yy+0.04),
dat$x[5:8], dat$y[5:8]) +
mapply(function(xx, yy)
annotation_raster(img3, xmin=xx-0.08, xmax=xx+0.08, ymin=yy-0.04, ymax=yy+0.04),
dat$x[9:12], dat$y[9:12]
)
}
plot_pfs <- function(dimension1,
dimension2,
rownames_vec = 1:length(dimension1),
img1 = "V1",
img2 = "V2",
img3 = "V3"){
dat <- data.frame(x = dimension1, y = dimension2, label = rownames_vec)
ggplot(dat)+labs(title="Partial Factor Scores",
x ="1", y = "2") + geom_text(data = dat, aes(x,y, label = rownames_vec), vjust = -0.5)+ xlim(-1.5,1.8) + ylim(-1.3,1.3) +
mapply(function(xx, yy)
annotation_raster(img1, xmin=xx-0.08, xmax=xx+0.08, ymin=yy-0.04, ymax=yy+0.04),
dat$x[1:4], dat$y[1:4]) +
mapply(function(xx, yy)
annotation_raster(img2, xmin=xx-0.08, xmax=xx+0.08, ymin=yy-0.04, ymax=yy+0.04),
dat$x[5:8], dat$y[5:8]) +
mapply(function(xx, yy)
annotation_raster(img3, xmin=xx-0.08, xmax=xx+0.08, ymin=yy-0.04, ymax=yy+0.04),
dat$x[9:12], dat$y[9:12])
}
plot_vload <- function(dimension1, dimension2, rownames_vec = 1:length(dimension1)){
dat <- data.frame(x = dimension1, y = dimension2, label = rownames_vec)
ggplot(dat) + geom_point(aes(x,y)) + labs(title="Variable loadings",
x ="1", y = "2") + geom_text(data = dat, aes(x,y, label = rownames_vec), vjust = -0.5)+ xlim(-0.5,0.5) + ylim(-0.4,0.6)
}
NZ <- readPNG("nz.png")
FR <- readPNG("fr.png")
CA <- readPNG("ca.png")
cfs = mfa_wine@cfs
plot_compromise(cfs[, 1], cfs[, 2], rownames_vec = row.names(wines), NZ, FR, CA)
plot = list()
for (i in 1:10){
pfs = mfa_wine@pfs[[i]]
plot[[i]] = plot_pfs(pfs[, 1], pfs[, 2], rownames(wines), NZ, FR, CA)
}
print (do.call(grid.arrange,  plot))
plot = list()
for (i in 1:10){
plot[[i]] = plot_vload(mfa_wine@mol[[i]][,1], mfa_wine@mol[[i]][,2], colnames(wines)[sets[[i]]])
}
print (do.call(grid.arrange,  plot))
character(1:10)
as.character(1:10)
devtools::document()
devtools::document()
# checking documentation
devtools::check_man()
# running tests
devtools::test()
devtools::build_vignettes()
# building tarball (e.g. oski_0.1.tar.gz)
devtools::build()
devtools::install()
library(mfaR)
?plot_compromise
?plot_compromise
plot_compromise(rnorm(20), rnorm(20))
library(mfaR)
?plot_compromise
?mfa
?mfa_const
library(mfaR)
?plot_compromise
?mfa_const
8.5/2
devtools::document()
# checking documentation
devtools::check_man()
# running tests
devtools::test()
devtools::build_vignettes()
# building tarball (e.g. oski_0.1.tar.gz)
devtools::build()
# checking install
devtools::install()
devtools::document()
# checking documentation
devtools::check_man()
# running tests
devtools::test()
devtools::build_vignettes()
# building tarball (e.g. oski_0.1.tar.gz)
devtools::build()
# checking install
devtools::install()
library(mfaR)
?mfa_const
library(mfaR)
?mfa_const
devtools::document()
# checking documentation
devtools::check_man()
# running tests
devtools::build_vignettes()
# building tarball (e.g. oski_0.1.tar.gz)
devtools::test()
devtools::build()
# checking install
devtools::install()
library(mfaR)
?mfa_const
library(mfaR)
?mfa_const
library(mfaR)
?mfa_const
library(devtools)
devtools::document()
# checking documentation
# running tests
devtools::test()
devtools::build_vignettes()
devtools::check_man()
# building tarball (e.g. oski_0.1.tar.gz)
devtools::build()
devtools::install()
# checking install
library(mfaR)
?mfa_const
setwd("C:/Users/Daniel/Desktop/Fall 2016/Stat 243")
setwd("C:/Users/Daniel/Desktop/Fall 2016/Stat 243/mfaR")
setwd("C:/Users/Daniel/Desktop/Fall 2016/Stat 243/mfaR")
NZ <- readPNG("nz.png")
library(png)
NZ <- readPNG("nz.png")
FR <- readPNG("fr.png")
CA <- readPNG("ca.png")
install.packages("mfaR_0.1.0.tar.gz")
setwd("C:/Users/Daniel/Desktop/Fall 2016/Stat 243")
install.packages("mfaR_0.1.0.tar.gz")
install.packages("mfaR_0.1.0.tar.gz", repos = NULL, type="source")
library(mfaR)
library(ggplot2)
?`ggplot2
library(devtools)
devtools::document()
setwd("C:/Users/Daniel/Desktop/Fall 2016/Stat 243/mfaR")
devtools::document()
# checking documentation
devtools::check_man()
# running tests
devtools::test()
devtools::build_vignettes()
# building tarball (e.g. oski_0.1.tar.gz)
devtools::build()
# checking install
devtools::install()
library(mfaR)
library(mfaR)
dimension1 <- rnorm(20)
dimension2 <- rnorm(20)
plot_compromise(dimension1, dimension2)
library(ggplot2)
library(png)
library(gridGraphics)
plot_compromise(dimension1, dimension2)
shiny::runApp('mfaR')
runApp('mfaR')
runApp('mfaR')
runApp('mfaR')
CVD(mfa_wine)
library(devtools)
devtools::document()
# checking documentation
devtools::check_man()
# running tests
devtools::build_vignettes()
devtools::test()
# building tarball (e.g. oski_0.1.tar.gz)
devtools::build()
# checking install
devtools::install()
library(mfaR)
?mfa_const
#load necessary packages
library(mfaR)
library(MFAg)
# Read data set
wines <- read.csv("wines.csv")
# Add row names
row.names(wines) <- wines[,1]
# Separate the grand table into individual tables (create the set list)
col_ind = grep("V2", colnames(wines))
sets = list()
for (i in 1:(length(col_ind))){
# First 9 tables
if (i < 10){
sets[[i]]= (col_ind[i]-1):(col_ind[i+1]-2)
}
# Last table
else{
sets[[i]]= (col_ind[i]-1):(col_ind[i]+2)
}
}
# Construct an object of class 'mfa'
mfa_wine <- mfa_const(data = wines, sets  = sets, ncomps = 4)
mfa_wine
sets
wines[,36:39]
#load necessary packages
library(mfaR)
library(MFAg)
# Read data set
wines <- read.csv("wines.csv")
# Add row names
row.names(wines) <- wines[,1]
# Separate the grand table into individual tables (create the set list)
col_ind = grep("V2", colnames(wines))
sets = list()
for (i in 1:(length(col_ind))){
# First 9 tables
if (i < 10){
sets[[i]]= (col_ind[i]-1):(col_ind[i+1]-2)
}
# Last table
else{
sets[[i]]= (col_ind[i]-1):(col_ind[i]+2)
}
}
# Construct an object of class 'mfa'
mfa_wine <- mfa_const(data = wines, sets  = sets, ncomps = 4)
mfa_wine
library(ggplot2)
library(png)
library(gridGraphics)
NZ <- readPNG("nz.png")
FR <- readPNG("fr.png")
CA <- readPNG("ca.png")
cfs = mfa_wine@cfs
plot_compromise(cfs[, 1], cfs[, 2], rownames_vec = row.names(wines), NZ, FR, CA)
col_ind = grep("V15", colnames(wines))
colnames(wines)[col_ind] <- "Peach"
col_ind = grep("V14", colnames(wines))
colnames(wines)[col_ind] <- "Grass"
col_ind = grep("V13", colnames(wines))
colnames(wines)[col_ind] <- "Melon"
col_ind = grep("V12", colnames(wines))
colnames(wines)[col_ind] <- "Hay"
col_ind = grep("V11", colnames(wines))
colnames(wines)[col_ind] <- "Vegetal"
col_ind = grep("V10", colnames(wines))
colnames(wines)[col_ind] <- "Flinty"
col_ind = grep("V9", colnames(wines))
colnames(wines)[col_ind] <- "Grassy"
col_ind = grep("V8", colnames(wines))
colnames(wines)[col_ind] <- "Leafy"
col_ind = grep("V7", colnames(wines))
colnames(wines)[col_ind] <- "Tropical"
col_ind = grep("V6", colnames(wines))
colnames(wines)[col_ind] <- "Citrus"
col_ind = grep("V5", colnames(wines))
colnames(wines)[col_ind] <- "Smoky"
col_ind = grep("V4", colnames(wines))
colnames(wines)[col_ind] <- "Mineral"
col_ind = grep("V3", colnames(wines))
colnames(wines)[col_ind] <- "Green Pepper"
col_ind = grep("V2", colnames(wines))
colnames(wines)[col_ind] <- "Passion Fruit"
col_ind = grep("V1", colnames(wines))
colnames(wines)[col_ind] <- "Cat Pee"
i <- 7
plot_vload(mfa_wine@mol[[i]][,1], mfa_wine@mol[[i]][,2], colnames(wines)[sets[[i]]])
mfa_wine@mol[[i]][,1]
mfa_wine@mol[[i]][,2]
plot(mfa_wine@mol[[i]][,1], mfa_wine@mol[[i]][,2])
colnames(wines)[sets[[i]]]
x = mfa_wine@mol[[i]][,1]
y = mfa_wine@mol[[i]][,2]
x
y
rownames_vec <- colnames(wines)[sets[[i]]]
rownames_vec
dat <- data.frame(x = dimension1, y = dimension2, label = rownames_vec)
ggplot(dat) + geom_point(aes(x,y)) + labs(title="Variable loadings",
x ="1", y = "2") + geom_text(data = dat, aes(x,y, label = rownames_vec), vjust = -0.5)+ xlim(-0.5,0.5) + ylim(-0.4,0.6)
dat <- data.frame(x = dimension1, y = dimension2, label = rownames_vec)
x
dimension1 <- x
dimension2 <- y
dimension2
dat <- data.frame(x = dimension1, y = dimension2, label = rownames_vec)
ggplot(dat) + geom_point(aes(x,y)) + labs(title="Variable loadings",
x ="1", y = "2") + geom_text(data = dat, aes(x,y, label = rownames_vec), vjust = -0.5)+ xlim(-0.5,0.5) + ylim(-0.4,0.6)
aes(x,y)
geom_point(aes(x,y))
geom_text(data = dat, aes(x,y, label = rownames_vec), vjust = -0.5)
ggplot(dat)
dat
+ geom_point(aes(x,y))
ggplot(dat) + geom_point(aes(x,y))
labs(title="Variable loadings",
x ="1", y = "2")
geom_text(data = dat, aes(x,y, label = rownames_vec), vjust = -0.5)
ggplot(dat) + geom_point(aes(x,y)) + labs(title="Variable loadings",
x ="1", y = "2")
ggplot(dat) + geom_point(aes(x,y)) + labs(title="Variable loadings",
x ="1", y = "2") + geom_text(data = dat, aes(x,y, label = rownames_vec), vjust = -0.5)
ggplot(dat) + geom_point(aes(x,y)) + labs(title="Variable loadings",
x ="1", y = "2") + geom_text(data = dat, aes(x,y, label = rownames_vec), vjust = -0.5)+ xlim(-0.5,0.5) + ylim(-0.4,0.6)
ggplot(dat) + geom_point(aes(x,y)) + labs(title="Variable loadings",
x ="1", y = "2") + geom_text(data = dat, aes(x,y, label = rownames_vec), vjust = -0.5)
ggplot(dat) + geom_point(aes(x,y)) + labs(title="Variable loadings",
x ="1", y = "2") + geom_text(data = dat, aes(x,y, label = rownames_vec), vjust = -0.5)+ xlim(-0.5,0.5)
ggplot(dat) + geom_point(aes(x,y)) + labs(title="Variable loadings",
x ="1", y = "2") + geom_text(data = dat, aes(x,y, label = rownames_vec), vjust = -0.5)+ xlim(-0.5,0.5) + ylim(-0.4,0.6)
ggplot(dat)
+ geom_point(aes(x,y))
ggplot(dat) +
geom_point(aes(x,y))
ggplot(dat) +
geom_point(aes(x,y))
ggplot(dat) +
geom_point(aes(x,y)) +
labs(title="Variable loadings", x ="1", y = "2")
ggplot(dat) +
geom_point(aes(x,y)) +
labs(title="Variable loadings", x ="1", y = "2") +
geom_text(data = dat, aes(x,y, label = rownames_vec), vjust = -0.5)
ggplot(dat) +
geom_point(aes(x,y)) +
labs(title="Variable loadings", x ="1", y = "2") +
geom_text(data = dat, aes(x,y, label = rownames_vec), vjust = -0.5) +
xlim(-0.5,0.5)
ggplot(dat) +
geom_point(aes(x,y)) +
labs(title="Variable loadings", x ="1", y = "2") +
geom_text(data = dat, aes(x,y, label = rownames_vec), vjust = -0.5) +
xlim(-0.5,0.5) +
ylim(-0.3,0.6)
ggplot(dat) +
geom_point(aes(x,y)) +
labs(title="Variable loadings", x ="1", y = "2") +
geom_text(data = dat, aes(x,y, label = rownames_vec), vjust = -0.5) +
xlim(-0.5,0.5) +
ylim(-0.5,0.6)
runApp('mfaR')
runApp('mfaR')
runApp('mfaR')
devtools::document()
# checking documentation
devtools::check_man()
# running tests
devtools::test()
devtools::build_vignettes()
# building tarball (e.g. oski_0.1.tar.gz)
devtools::build()
# checking install
devtools::install()
library(mfaR)
runApp('mfaR')
runApp()
print(source('shiny_app.R')$value)
print(source('MFA_shiny_app.R')$value)
library(devtools)
devtools::document()
# checking documentation
devtools::check_man()
# running tests
devtools::test()
# building tarball (e.g. oski_0.1.tar.gz)
devtools::build_vignettes()
devtools::build()
# checking install
devtools::install()
library(mfaR)
?mfa_const
library(mfaR)
?mfa_const
install.packages('rsconnect')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
