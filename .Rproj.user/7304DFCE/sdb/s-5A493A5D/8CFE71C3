{
    "collab_server" : "",
    "contents" : "#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\nlibrary(ggplot2)\nlibrary(MFAg)\nlibrary(mfaR)\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui <- shinyUI(fluidPage(\n\n  # Application title\n  titlePanel(\"MFA for Wine Tasting\"),\n\n  # Sidebars for input\n  sidebarLayout(\n    sidebarPanel(\n\n      selectInput(\"select\", label = h3(\"Plot Options\"),\n                  choices = list(\"Eigenvalue Barplot\" = 1, \"Common factor scores\" = 2,\n                                 \"Partial factors scores.\" = 3, \"Loadings\" = 4),\n                  selected = 1),\n\n      sliderInput(inputId = \"table\",\n                  label = \"Which Wine Critic?\",\n                  min = 1,\n                  max = 10,\n                  value = 1)\n\n\n    ),\n\n\n    # Show plots\n    mainPanel(\n      plotOutput(\"plot\")\n    )\n  )\n))\n\n# Define server\nserver <- shinyServer(function(input, output) {\n\n  wines <- read.csv(\"wines.csv\")\n\n  # Add row names\n  row.names(wines) <- wines[,1]\n\n  # Separate the grand table into individual tables (create the set list)\n  col_ind = grep(\"V2\", colnames(wines))\n  sets = list()\n  for (i in 1:(length(col_ind))){\n    # First 9 tables\n    if (i < 10){\n      sets[[i]]= (col_ind[i]-1):(col_ind[i+1]-2)\n    }\n    # Last table\n    else{\n      sets[[i]]= (col_ind[i]-1):(col_ind[i]+2)\n    }\n  }\n\n  col_ind = grep(\"V15\", colnames(wines))\n  colnames(wines)[col_ind] <- \"Peach\"\n  col_ind = grep(\"V14\", colnames(wines))\n  colnames(wines)[col_ind] <- \"Grass\"\n  col_ind = grep(\"V13\", colnames(wines))\n  colnames(wines)[col_ind] <- \"Melon\"\n  col_ind = grep(\"V12\", colnames(wines))\n  colnames(wines)[col_ind] <- \"Hay\"\n  col_ind = grep(\"V11\", colnames(wines))\n  colnames(wines)[col_ind] <- \"Vegetal\"\n  col_ind = grep(\"V10\", colnames(wines))\n  colnames(wines)[col_ind] <- \"Flinty\"\n  col_ind = grep(\"V9\", colnames(wines))\n  colnames(wines)[col_ind] <- \"Grassy\"\n  col_ind = grep(\"V8\", colnames(wines))\n  colnames(wines)[col_ind] <- \"Leafy\"\n  col_ind = grep(\"V7\", colnames(wines))\n  colnames(wines)[col_ind] <- \"Tropical\"\n  col_ind = grep(\"V6\", colnames(wines))\n  colnames(wines)[col_ind] <- \"Citrus\"\n  col_ind = grep(\"V5\", colnames(wines))\n  colnames(wines)[col_ind] <- \"Smoky\"\n  col_ind = grep(\"V4\", colnames(wines))\n  colnames(wines)[col_ind] <- \"Mineral\"\n  col_ind = grep(\"V3\", colnames(wines))\n  colnames(wines)[col_ind] <- \"Green Pepper\"\n  col_ind = grep(\"V2\", colnames(wines))\n  colnames(wines)[col_ind] <- \"Passion Fruit\"\n  col_ind = grep(\"V1\", colnames(wines))\n  colnames(wines)[col_ind] <- \"Cat Pee\"\n\n  # Construct the object first\n  wine <- mfa_const(data = wines, sets  = sets, ncomps = 11)\n\n\n  # Extract features from the object\n  eigenv = wine@eigenvalues\n  cfs = wine@cfs\n  pfs = wine@pfs\n  Q = wine@mol\n\n  plot_pfs_shiny <- function(dimension1,\n                             dimension2,\n                             rownames_vec = as.character(1:length(dimension1))){\n\n    dat <- data.frame(x = dimension1, y = dimension2, label = rownames_vec)\n\n    ggplot(dat) +\n      geom_point(aes(x,y)) +\n      labs(title=\"Partial Factor Scores\", x =\"1\", y = \"2\") +\n      geom_text(data = dat, aes(x,y, label = rownames_vec), vjust = -0.5) +\n      xlim(-1.5,1.8) +\n      ylim(-1.3,1.3)\n\n  }\n\n  plot_compromise_shiny <- function(dimension1,\n                              dimension2,\n                              rownames_vec = as.character(1:length(dimension1))){\n\n    dat <- data.frame(x = dimension1, y = dimension2, label = rownames_vec)\n    colnames(dat) <- c(\"x\",\"y\")\n\n    ggplot(dat) +\n      geom_point(aes(x,y)) +\n      labs(title=\"Compromise of the tables\", x =\"1\", y = \"2\") +\n      ylim(-1, 1) +\n      geom_text(data = dat, aes(x,y, label = rownames_vec), vjust = -2)\n\n  }\n\n  # Make the plots\n\n  pt <- reactive({\n    input$select\n    input$table\n    eigenv_name = c(1,2,3,4,5,6,7,8,9,10,11)\n\n    # Eigenvalue?\n    if (input$select == 1){\n      return(barplot(eigenv,\n                     names.arg= eigenv_name,\n                     ylab=\"Magnitude of Eigenvalues\",\n                     xlab=\"Number of component\"))\n    }\n\n    # Compromise?\n    else if(input$select == 2){\n      cfs_dim1 = cfs[,1]\n      cfs_dim2 = cfs[,2]\n      return(plot_compromise_shiny(cfs_dim1,cfs_dim2,row.names(wines)))\n    }\n\n    # pfs?\n    else if(input$select == 3){\n      return(plot_pfs_shiny(pfs[[input$table]][,1], pfs[[input$table]][,2], rownames(wines)))\n    }\n\n    # Loading?\n    else if(input$select == 4){\n      return(plot_vload( Q[[input$table]][,1], Q[[input$table]][,2], colnames(wines)[sets[[input$table]]]))\n    }\n\n    else{\n      return(NULL)\n    }\n\n\n  })\n\n  output$plot = renderPlot({pt()})\n\n\n\n})\n\n# Run the application\nshinyApp(ui = ui, server = server)\n\n",
    "created" : 1480750823054.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "373932273",
    "id" : "8CFE71C3",
    "lastKnownWriteTime" : 1480750333,
    "last_content_update" : 1480750333,
    "path" : "C:/Users/Daniel/Desktop/Fall 2016/Stat 243/mfaR/MFA_shiny_app.R",
    "project_path" : "MFA_shiny_app.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}